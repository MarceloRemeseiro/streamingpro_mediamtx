services:
  # Base de datos PostgreSQL
  postgres:
    container_name: streamingpro_postgres_dev
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - streamingpro-network

  # Base de datos PostgreSQL para tests
  postgres-test:
    container_name: streamingpro_postgres_test_dev
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: streamingpro_test_db
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d streamingpro_test_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - streamingpro-network

  # Backend NestJS con hot-reload
  backend:
    container_name: streamingpro_backend_dev
    build:
      context: .
      dockerfile: docker/backend/Dockerfile.dev
      target: development
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?schema=public&sslmode=disable
      - DATABASE_TEST_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-test:5432/streamingpro_test_db?schema=public&sslmode=disable
      
      # Database - Configuración directa
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      
      # MediaMTX Configuration (bridge networking)
      - MEDIAMTX_API_URL=http://mediamtx:9997
      - MEDIAMTX_API_USER=${MEDIAMTX_API_USER}
      - MEDIAMTX_API_PASSWORD=${MEDIAMTX_API_PASSWORD}
      - MEDIAMTX_HLS_BASE_URL=${MEDIAMTX_HLS_BASE_URL}
      
      # Security & CORS
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGIN=${CORS_ORIGIN}
      - FRONTEND_URL=${FRONTEND_URL}
      
      # Server info
      - SERVER_IP=${SERVER_IP}
      - SERVER_HOST=${SERVER_HOST}
      
      # Puertos de streaming
      - RTMP_PORT=${RTMP_PORT}
      - SRT_PORT=${SRT_PORT}
      - RTSP_PORT=${RTSP_PORT}
      - HLS_PORT=${HLS_PORT}
      
      # Logging
      - LOG_LEVEL=${LOG_LEVEL}
    volumes:
      # Solo montar el código fuente para hot-reload
      - ./apps/backend/src:/app/apps/backend/src:ro
    depends_on:
      postgres:
        condition: service_healthy
      postgres-test:
        condition: service_healthy
    networks:
      - streamingpro-network

  # Frontend Next.js con hot-reload
  frontend:
    container_name: streamingpro_frontend_dev
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile.dev
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - NEXT_TELEMETRY_DISABLED=1
      - HOSTNAME=0.0.0.0
      
      # Variables públicas de Next.js para desarrollo
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_WEBSOCKET_URL=${NEXT_PUBLIC_WEBSOCKET_URL}
      - NEXT_PUBLIC_HLS_BASE_URL=${NEXT_PUBLIC_HLS_BASE_URL}
      - NEXT_PUBLIC_MEDIAMTX_HOST=${NEXT_PUBLIC_MEDIAMTX_HOST}
      - NEXT_PUBLIC_HLS_PORT=${NEXT_PUBLIC_HLS_PORT}
      - NEXT_PUBLIC_RTMP_PORT=${NEXT_PUBLIC_RTMP_PORT}
      - NEXT_PUBLIC_SRT_PORT=${NEXT_PUBLIC_SRT_PORT}
    volumes:
      # Montar el código fuente de la app para hot-reload.
      # node_modules y .next son manejados dentro del contenedor para evitar conflictos.
      - ./apps/frontend:/app/apps/frontend
    networks:
      - streamingpro-network

  # MediaMTX para streaming
  mediamtx:
    container_name: streamingpro_mediamtx_dev
    build:
      context: docker/mediamtx
      dockerfile: Dockerfile
    ports:
      - "8554:8554"    # RTSP TCP
      - "8002:8000/udp" # RTSP UDP RTP (cambio para evitar conflicto con Portainer)
      - "8001:8001/udp" # RTSP UDP RTCP
      - "1935:1935"    # RTMP
      - "8888:8888"    # HLS
      - "8889:8889"    # WebRTC HTTP
      - "8189:8189/udp" # WebRTC ICE UDP
      - "8890:8890/udp" # SRT UDP (Puerto principal)
      - "9997:9997"    # API
      - "9998:9998"    # Metrics
    environment:
      # Configuraciones específicas para debug SRT
      - MTX_LOGLEVEL=debug
      - MTX_SRT=yes
      - MTX_SRTADDRESS=:8890
      # Configurar MediaMTX para mejor log de conexiones SRT
      - MTX_RUNONCONNECT=echo "Cliente conectado tipo=$MTX_CONN_TYPE id=$MTX_CONN_ID"
    volumes:
      - ./docker/mediamtx/mediamtx.yml:/mediamtx.yml:ro
    networks:
      - streamingpro-network

volumes:
  postgres_dev_data:
  postgres_test_data:

networks:
  streamingpro-network:
    driver: bridge 