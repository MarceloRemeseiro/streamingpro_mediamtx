# ====================================================================================
# STAGE 1: Base
# Define una imagen base con Node.js y pnpm configurado.
# ====================================================================================
FROM node:20-alpine AS base
WORKDIR /app
RUN corepack enable
RUN apk add --no-cache bash

# ====================================================================================
# STAGE 2: Dependencias
# Instala TODAS las dependencias del monorepo.
# Esta capa se cacheará y solo se reconstruirá si los archivos de lock o package.json cambian.
# ====================================================================================
FROM base AS deps
COPY pnpm-lock.yaml pnpm-workspace.yaml ./
COPY package.json ./
COPY apps/backend/package.json ./apps/backend/
COPY apps/frontend/package.json ./apps/frontend/
RUN pnpm install --frozen-lockfile --ignore-scripts

# ====================================================================================
# STAGE 3: Desarrollo
# Prepara el entorno final de desarrollo.
# ====================================================================================
FROM base AS development
# Crear usuario no-root para seguridad
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Copiar las dependencias instaladas y el código fuente desde las capas anteriores
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /root/.local/share/pnpm/store ./.pnpm-store
COPY . .

# Asignar permisos al usuario no-root para que pueda escribir en .next
# El chown se hace aquí, donde tenemos permisos de root.
RUN chown -R nextjs:nodejs .
RUN chown -R nextjs:nodejs /app/apps/frontend/.next || true

# Cambiar al usuario no-root
USER nextjs

# Exponer el puerto del frontend
EXPOSE 3001

# Comando por defecto para iniciar el servidor de desarrollo
CMD ["pnpm", "--filter", "frontend", "run", "dev"] 