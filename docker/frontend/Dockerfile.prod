# =============================================================================
# STREAMINGPRO FRONTEND - DOCKERFILE PRODUCCIÓN
# =============================================================================
# Multi-stage build optimizado para Next.js en producción
# =============================================================================

FROM node:22.16-alpine AS base

# Instalar herramientas del sistema necesarias
RUN apk add --no-cache \
    curl \
    && rm -rf /var/cache/apk/*

# Configurar pnpm
RUN corepack enable pnpm
RUN pnpm config set store-dir /root/.pnpm-store

# =============================================================================
# STAGE: Dependencies
# =============================================================================
FROM base AS dependencies

WORKDIR /app

# Copiar archivos de configuración de pnpm
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY apps/frontend/package.json ./apps/frontend/

# Instalar dependencias
RUN pnpm install --frozen-lockfile --prod=false

# =============================================================================
# STAGE: Build
# =============================================================================
FROM dependencies AS build

WORKDIR /app

# Argumentos de build para variables públicas
ARG NEXT_PUBLIC_API_URL
ARG NEXT_PUBLIC_WEBSOCKET_URL
ARG NEXT_PUBLIC_HLS_BASE_URL

# Configurar variables de entorno para el build
ENV NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL
ENV NEXT_PUBLIC_WEBSOCKET_URL=$NEXT_PUBLIC_WEBSOCKET_URL
ENV NEXT_PUBLIC_HLS_BASE_URL=$NEXT_PUBLIC_HLS_BASE_URL
ENV NODE_ENV=production

# Copiar código fuente
COPY apps/frontend ./apps/frontend

WORKDIR /app/apps/frontend

# Build optimizado de Next.js
RUN pnpm build

# =============================================================================
# STAGE: Production Dependencies
# =============================================================================
FROM base AS prod-deps

WORKDIR /app

# Copiar archivos de configuración
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY apps/frontend/package.json ./apps/frontend/

# Instalar solo dependencias de producción
RUN pnpm install --frozen-lockfile --prod=true

# =============================================================================
# STAGE: Production
# =============================================================================
FROM base AS production

# Crear usuario no-root para seguridad
RUN addgroup -g 1001 -S nextjs && \
    adduser -S nextjs -u 1001

WORKDIR /app

# Copiar dependencias de producción
COPY --from=prod-deps --chown=nextjs:nextjs /app/node_modules ./node_modules
COPY --from=prod-deps --chown=nextjs:nextjs /app/apps/frontend/node_modules ./apps/frontend/node_modules

# Copiar aplicación compilada
COPY --from=build --chown=nextjs:nextjs /app/apps/frontend/.next ./apps/frontend/.next
COPY --from=build --chown=nextjs:nextjs /app/apps/frontend/public ./apps/frontend/public
COPY --from=build --chown=nextjs:nextjs /app/apps/frontend/package.json ./apps/frontend/
COPY --from=build --chown=nextjs:nextjs /app/apps/frontend/next.config.mjs ./apps/frontend/

# Crear directorio .next/cache con permisos correctos
RUN mkdir -p /app/apps/frontend/.next/cache && \
    chown -R nextjs:nextjs /app/apps/frontend/.next

# Cambiar al usuario no-root
USER nextjs

# Configurar variables de entorno
ENV NODE_ENV=production
ENV PORT=3000
ENV HOSTNAME=0.0.0.0

WORKDIR /app/apps/frontend

# Exponer puerto
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:3000 || exit 1

# Comando de inicio optimizado para producción
CMD ["pnpm", "start"] 