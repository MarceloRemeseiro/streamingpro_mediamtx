###############################################
# StreamingPro MediaMTX Configuration
# Optimizado para streaming profesional SRT/RTMP/HLS
# Version: 1.0.0 (for MediaMTX v1.12.3+)
###############################################

###############################################
# Global settings

# Verbosity of the program; available values are "error", "warn", "info", "debug".
logLevel: info
# Destinations of log messages; available values are "stdout", "file" and "syslog".
logDestinations: [stdout]
# If "file" is in logDestinations, this is the file which will receive the logs.
logFile: /var/log/mediamtx.log
# If "syslog" is in logDestinations, use prefix for logs.
sysLogPrefix: streamingpro-mediamtx

# Timeout of read operations.
readTimeout: 15s
# Timeout of write operations.
writeTimeout: 15s
# Size of the queue of outgoing packets (aumentado para mejor rendimiento)
writeQueueSize: 4096
# Maximum size of outgoing UDP packets.
udpMaxPayloadSize: 1472

# Command to run when a client connects to the server.
runOnConnect:
# Restart the command if it exits.
runOnConnectRestart: no
# Command to run when a client disconnects from the server.
runOnDisconnect:

###############################################
# Global settings -> Authentication

# Authentication method.
authMethod: internal

# Internal authentication.
authInternalUsers:
  # Default user for streaming clients
- user: any
  pass:
  ips: []
  permissions:
  - action: publish
    path:
  - action: read
    path:
  - action: playback
    path:

  # Admin access for API (from our Docker network)
- user: admin
  pass: admin123
  ips: ['127.0.0.1', '::1', '172.16.0.0/12', '10.0.0.0/8', '192.168.0.0/16']
  permissions:
  - action: api
  - action: metrics
  - action: pprof
  - action: publish
  - action: read

###############################################
# Global settings -> Control API

# Enable controlling the server through the Control API.
api: yes
# Address of the Control API listener.
apiAddress: :9997
# Enable TLS/HTTPS on the Control API server.
apiEncryption: no
# Path to the server key.
apiServerKey: server.key
# Path to the server certificate.
apiServerCert: server.crt
# Value of the Access-Control-Allow-Origin header provided in every HTTP response.
apiAllowOrigin: '*'
# List of IPs or CIDRs of proxies placed before the HTTP server.
apiTrustedProxies: ['172.16.0.0/12', '10.0.0.0/8', '192.168.0.0/16']

###############################################
# Global settings -> Metrics

# Enable Prometheus-compatible metrics.
metrics: yes
# Address of the metrics HTTP listener.
metricsAddress: :9998
# Enable TLS/HTTPS on the Metrics server.
metricsEncryption: no
# Path to the server key.
metricsServerKey: server.key
# Path to the server certificate.
metricsServerCert: server.crt
# Value of the Access-Control-Allow-Origin header provided in every HTTP response.
metricsAllowOrigin: '*'
# List of IPs or CIDRs of proxies placed before the HTTP server.
metricsTrustedProxies: ['172.16.0.0/12', '10.0.0.0/8', '192.168.0.0/16']

###############################################
# Global settings -> PPROF

# Enable pprof-compatible endpoint to monitor performances.
pprof: yes
# Address of the pprof listener.
pprofAddress: :9999
# Enable TLS/HTTPS on the pprof server.
pprofEncryption: no
# Path to the server key.
pprofServerKey: server.key
# Path to the server certificate.
pprofServerCert: server.crt
# Value of the Access-Control-Allow-Origin header provided in every HTTP response.
pprofAllowOrigin: '*'
# List of IPs or CIDRs of proxies placed before the HTTP server.
pprofTrustedProxies: ['172.16.0.0/12', '10.0.0.0/8', '192.168.0.0/16']

###############################################
# Global settings -> Playback server

# Enable downloading recordings from the playback server.
playback: yes
# Address of the playback server listener.
playbackAddress: :9996
# Enable TLS/HTTPS on the playback server.
playbackEncryption: no
# Path to the server key.
playbackServerKey: server.key
# Path to the server certificate.
playbackServerCert: server.crt
# Value of the Access-Control-Allow-Origin header provided in every HTTP response.
playbackAllowOrigin: '*'
# List of IPs or CIDRs of proxies placed before the HTTP server.
playbackTrustedProxies: ['172.16.0.0/12', '10.0.0.0/8', '192.168.0.0/16']

###############################################
# Global settings -> RTSP server

# Enable publishing and reading streams with the RTSP protocol.
rtsp: yes
# List of enabled RTSP transport protocols.
rtspTransports: [udp, multicast, tcp]
# Encrypt handshakes and TCP streams with TLS (RTSPS).
rtspEncryption: "no"
# Address of the TCP/RTSP listener.
rtspAddress: :8554
# Address of the TCP/TLS/RTSPS listener.
rtspsAddress: :8322
# Address of the UDP/RTP listener.
rtpAddress: :8000
# Address of the UDP/RTCP listener.
rtcpAddress: :8001
# IP range of all UDP-multicast listeners.
multicastIPRange: 224.1.0.0/16
# Port of all UDP-multicast/RTP listeners.
multicastRTPPort: 8002
# Port of all UDP-multicast/RTCP listeners.
multicastRTCPPort: 8003
# Path to the server key.
rtspServerKey: server.key
# Path to the server certificate.
rtspServerCert: server.crt
# Authentication methods.
rtspAuthMethods: [basic]

###############################################
# Global settings -> RTMP server

# Enable publishing and reading streams with the RTMP protocol.
rtmp: yes
# Address of the RTMP listener.
rtmpAddress: :1935
# Encrypt connections with TLS (RTMPS).
rtmpEncryption: "no"
# Address of the RTMPS listener.
rtmpsAddress: :1936
# Path to the server key.
rtmpServerKey: server.key
# Path to the server certificate.
rtmpServerCert: server.crt

###############################################
# Global settings -> HLS server

# Enable reading streams with the HLS protocol.
hls: yes
# Address of the HLS listener.
hlsAddress: :8888
# Enable TLS/HTTPS on the HLS server.
hlsEncryption: no
# Path to the server key.
hlsServerKey: server.key
# Path to the server certificate.
hlsServerCert: server.crt
# Value of the Access-Control-Allow-Origin header provided in every HTTP response.
hlsAllowOrigin: '*'
# List of IPs or CIDRs of proxies placed before the HLS server.
hlsTrustedProxies: ['172.16.0.0/12', '10.0.0.0/8', '192.168.0.0/16']
# HÍBRIDO: Balance entre OBS publishing y VLC compatibility
hlsAlwaysRemux: no
# Variant optimizado para VLC según documentación MediaMTX oficial
hlsVariant: mpegts
# Number of HLS segments optimizado para estabilidad
hlsSegmentCount: 7
# Minimum duration of each segment optimizado para VLC
hlsSegmentDuration: 3s
# Minimum duration of each part según documentación MediaMTX
hlsPartDuration: 500ms
# Maximum size of each segment.
hlsSegmentMaxSize: 50M
# Directory in which to save segments (empty = keep in RAM).
hlsDirectory: ''
# Close muxer when no readers for this time (optimizado)
hlsMuxerCloseAfter: 10s

###############################################
# Global settings -> WebRTC server

# Enable publishing and reading streams with the WebRTC protocol.
webrtc: yes
# Address of the WebRTC HTTP listener.
webrtcAddress: :8889
# Enable TLS/HTTPS on the WebRTC server.
webrtcEncryption: no
# Path to the server key.
webrtcServerKey: server.key
# Path to the server certificate.
webrtcServerCert: server.crt
# Value of the Access-Control-Allow-Origin header provided in every HTTP response.
webrtcAllowOrigin: '*'
# List of IPs or CIDRs of proxies placed before the WebRTC server.
webrtcTrustedProxies: ['172.16.0.0/12', '10.0.0.0/8', '192.168.0.0/16']
# Address of a local UDP listener that will receive connections.
webrtcLocalUDPAddress: :8189
# Address of a local TCP listener that will receive connections.
webrtcLocalTCPAddress: ''
# Gather IPs from interfaces and send them to clients.
webrtcIPsFromInterfaces: yes
# List of interfaces whose IPs will be sent to clients.
webrtcIPsFromInterfacesList: []
# List of additional hosts or IPs to send to clients.
webrtcAdditionalHosts: []
# ICE servers for NAT traversal
webrtcICEServers2: 
  - url: stun:stun.l.google.com:19302
# Time to wait for the WebRTC handshake to complete.
webrtcHandshakeTimeout: 10s
# Maximum time to gather video tracks.
webrtcTrackGatherTimeout: 2s
# The maximum time to gather STUN candidates.
webrtcSTUNGatherTimeout: 5s

###############################################
# Global settings -> SRT server

# Enable publishing and reading streams with the SRT protocol.
srt: yes
# Address of the SRT listener.
srtAddress: :8890

# NOTA: MediaMTX optimiza SRT a nivel de cliente, no servidor
# Los parámetros de latencia se configuran en la URL del cliente

###############################################
# Default path settings

pathDefaults:
  # Source of the stream - default is publisher (clients push streams)
  source: publisher
  # If the source is a URL, and the source certificate is self-signed
  sourceFingerprint:
  # Pull sources only when readers are connected (saves bandwidth)
  sourceOnDemand: no
  sourceOnDemandStartTimeout: 10s
  sourceOnDemandCloseAfter: 10s
  # Maximum number of readers. Zero means no limit.
  maxReaders: 0
  # SRT encryption passphrase required to read from this path.
  srtReadPassphrase:
  # Fallback path if stream is not available
  fallback:
  # Route original timestamps instead of replacing them
  useAbsoluteTimestamp: false

  ###############################################
  # Default path settings -> Record
  
  # Record streams to disk (disabled by default)
  record: no
  # Path of recording segments
  recordPath: /recordings/%path/%Y-%m-%d_%H-%M-%S-%f
  # Format of recorded segments (fmp4 is more efficient than mpegts)
  recordFormat: fmp4
  # Duration of each recording part
  recordPartDuration: 1s
  # Minimum duration of each segment
  recordSegmentDuration: 1h
  # Delete segments after this timespan (7 days)
  recordDeleteAfter: 7d

  ###############################################
  # Default path settings -> Publisher source
  
  # Allow another client to disconnect current publisher and publish in its place
  overridePublisher: yes
  # SRT encryption passphrase required to publish to this path
  srtPublishPassphrase:

  ###############################################
  # Default path settings -> RTSP source
  
  # Transport protocol for pulling RTSP streams
  rtspTransport: automatic
  # Support sources that don't provide server ports
  rtspAnyPort: no
  # Range header for starting streaming from specific offset
  rtspRangeType:
  rtspRangeStart:

  ###############################################
  # Default path settings -> Redirect source
  
  # Path which clients will be redirected to
  sourceRedirect:

  ###############################################
  # Default path settings -> Hooks
  
  # Commands to run on various events (disabled by default)
  runOnInit:
  runOnInitRestart: no
  runOnDemand:
  runOnDemandRestart: no
  runOnDemandStartTimeout: 10s
  runOnDemandCloseAfter: 10s
  runOnUnDemand:
  runOnReady:
  runOnReadyRestart: no
  runOnNotReady:
  runOnRead:
  runOnReadRestart: no
  runOnUnread:
  runOnRecordSegmentCreate:
  runOnRecordSegmentComplete:

###############################################
# Path settings

# Configuraciones específicas por path.
# Los paths se crearán dinámicamente desde nuestro backend.
paths:
  # Configuración para todos los paths que no tengan configuración específica
  all_others:
    # Permitir override del publisher para hot-reload
    overridePublisher: yes
    # Máximo de lectores por stream
    maxReaders: 100
    # Timeout optimizado para streaming profesional
    sourceOnDemandStartTimeout: 5s
    sourceOnDemandCloseAfter: 30s

  # Configuración especial para streams que requieren máxima compatibilidad VLC
  # Usar patrón: stream_name_vlc para activar esta configuración
  "~(.+)_vlc$":
    # Permitir override del publisher
    overridePublisher: yes
    # Máximo de lectores optimizado para VLC compatibility
    maxReaders: 50
    # Timeouts ajustados para mejor estabilidad
    sourceOnDemandStartTimeout: 10s
    sourceOnDemandCloseAfter: 60s 